{
	"name": "POC_Output_List",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "task"
				},
				{
					"name": "TaskResource"
				},
				{
					"name": "Resource"
				},
				{
					"name": "projectActivityTask"
				},
				{
					"name": "ProjectActivity"
				},
				{
					"name": "ProjectPhaseActivity"
				},
				{
					"name": "ProjectPahse"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "projectlist",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TaskId as integer,",
				"          TaskName as string,",
				"          TaskDescription as string,",
				"          TaskSpecificationStatement as string,",
				"          SequenceNumber as integer,",
				"          MilestoneIndicator as boolean,",
				"          CriticalPathTaskIndicator as boolean,",
				"          TaskNote as string,",
				"          TaskPlannedStartTimestamp as timestamp,",
				"          TaskScheduledStartTimestamp as timestamp,",
				"          TaskActualStartTimestamp as timestamp,",
				"          TaskPlannedCompletionTimestamp as timestamp,",
				"          TaskScheduledCompletionTimestamp as timestamp,",
				"          TaskActualCompletionTimestamp as timestamp,",
				"          TaskEarliestStartTimestamp as timestamp,",
				"          TaskLatestStartTimestamp as timestamp,",
				"          TaskEarliestCompletionTimestamp as timestamp,",
				"          TaskLatestCompletionTimestamp as timestamp,",
				"          TaskFloatHours as integer,",
				"          PlannedBillableLaborUnits as integer,",
				"          ActualBillableLaborUnits as integer,",
				"          PlannedBillableChargesAmount as decimal(18,2),",
				"          ActualBillableChargesAmount as decimal(18,2),",
				"          PlannedCostsAmount as decimal(18,2),",
				"          ActualCostsAmount as decimal(18,2),",
				"          TaskTypeId as integer,",
				"          LocationId as integer,",
				"          ResponsibilityCenterId as integer,",
				"          TaskGlAccountNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'Task') ~> task",
				"source(output(",
				"          TaskId as integer,",
				"          ResourceId as integer,",
				"          ResourceNumber as integer,",
				"          ResourceAmount as decimal(18,2),",
				"          ResourceQuantity as decimal(18,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'TaskResource') ~> TaskResource",
				"source(output(",
				"          ResourceId as integer,",
				"          ResourceName as string,",
				"          ResourceDescription as string,",
				"          StandardRateAmount as decimal(18,2),",
				"          OvertimeRateAmount as decimal(18,2),",
				"          PlanningStandardRateAmount as decimal(18,2),",
				"          PlanningOvertimeRateAmount as decimal(18,2),",
				"          ResourceTypeId as integer,",
				"          EmployeeId as integer,",
				"          PartyId as long,",
				"          ItemSku as string,",
				"          AssetId as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'Resource') ~> Resource",
				"source(output(",
				"          ProjectId as integer,",
				"          ActivityId as integer,",
				"          TaskId as integer,",
				"          ActivityTaskSequenceNumber as integer,",
				"          ActivityTaskNote as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectActivityTask') ~> projectActivityTask",
				"source(output(",
				"          ProjectId as integer,",
				"          ActivityId as integer,",
				"          ActivityName as string,",
				"          ActivityDescription as string,",
				"          ActivityPlannedStartTimestamp as timestamp,",
				"          ActivityActualStartTimestamp as timestamp,",
				"          ActivityPlannedEndTimestamp as timestamp,",
				"          ActivityActualEndTimestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectActivity') ~> ProjectActivity",
				"source(output(",
				"          ProjectId as integer,",
				"          ProjectPhaseId as integer,",
				"          ActivityId as integer,",
				"          ProjectPhaseActivityNote as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectPhaseActivity') ~> ProjectPhaseActivity",
				"source(output(",
				"          ProjectId as integer,",
				"          ProjectPhaseId as integer,",
				"          ProjectPhaseTypeId as integer,",
				"          ProjectPhaseName as string,",
				"          ProjectPhaseDescription as string,",
				"          ProjectPhasePlannedStartDate as date,",
				"          ProjectPhasePlannedFinishDate as date,",
				"          ProjectPhaseActualStartDate as date,",
				"          ProjectPhaseActualFinishDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectPhase') ~> ProjectPahse",
				"task, TaskResource join(task@TaskId == TaskResource@TaskId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, Resource join(TaskResource@ResourceId == Resource@ResourceId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, projectActivityTask join(task@TaskId == projectActivityTask@TaskId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, ProjectActivity join(projectActivityTask@ActivityId == ProjectActivity@ActivityId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, ProjectPhaseActivity join(ProjectActivity@ActivityId == ProjectPhaseActivity@ActivityId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5, ProjectPahse join(ProjectPhaseActivity@ProjectPhaseId == ProjectPahse@ProjectPhaseId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"join6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['projectlist.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     mapColumn(",
				"          ProjectId = ProjectPahse@ProjectId,",
				"          ProjectPhaseName,",
				"          ActivityName,",
				"          TaskName,",
				"          ResourceName",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}