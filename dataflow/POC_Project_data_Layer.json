{
	"name": "POC_Project_data_Layer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "poc_project_layer",
						"type": "DatasetReference"
					},
					"name": "ProjectData"
				}
			],
			"sinks": [
				{
					"name": "Project"
				},
				{
					"name": "ProjectPhase"
				},
				{
					"name": "ProjectActivity"
				},
				{
					"name": "ProjectActivityTask"
				},
				{
					"name": "Task"
				}
			],
			"transformations": [
				{
					"name": "komoku"
				},
				{
					"name": "shokomoku"
				},
				{
					"name": "jishijiko"
				},
				{
					"name": "ToTimestamp"
				}
			],
			"scriptLines": [
				"source(output(",
				"          follow_id as string,",
				"          komoku as (comment as string, jisshikomoku as string, komoku_id as short, mokuhyochi as string)[],",
				"          project_id as integer,",
				"          shokomoku as (comment as string, komoku_id as short, naiyo as string, shokomoku_id as short, tanto_bumon as string)[],",
				"          shosai_jishijiko as (End as string, jishijiko_id as short, jisshikomoku as string, shokomoku_id as short, start as string)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'singleDocument') ~> ProjectData",
				"ProjectData foldDown(unroll(komoku),",
				"     mapColumn(",
				"          jisshikomoku = komoku.jisshikomoku,",
				"          komoku_id = komoku.komoku_id,",
				"          mokuhyochi = komoku.mokuhyochi,",
				"          project_id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> komoku",
				"ProjectData foldDown(unroll(shokomoku),",
				"     mapColumn(",
				"          komoku_id = shokomoku.komoku_id,",
				"          naiyo = shokomoku.naiyo,",
				"          shokomoku_id = shokomoku.shokomoku_id,",
				"          project_id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> shokomoku",
				"ProjectData foldDown(unroll(shosai_jishijiko),",
				"     mapColumn(",
				"          End = shosai_jishijiko.End,",
				"          jishijiko_id = shosai_jishijiko.jishijiko_id,",
				"          jisshikomoku = shosai_jishijiko.jisshikomoku,",
				"          shokomoku_id = shosai_jishijiko.shokomoku_id,",
				"          start = shosai_jishijiko.start,",
				"          project_id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> jishijiko",
				"jishijiko cast(output(",
				"          End as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss',",
				"          jishijiko_id as integer,",
				"          jisshikomoku as string,",
				"          start as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss'",
				"     ),",
				"     errors: true) ~> ToTimestamp",
				"ProjectData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'Project',",
				"     input(",
				"          ProjectId as integer,",
				"          ProjectName as string,",
				"          ProjectDescription as string,",
				"          ProjectTypeId as integer,",
				"          ProjectPlannedStartTimestamp as timestamp,",
				"          ProjectPlannedEndTimestamp as timestamp,",
				"          ProjectEarliestStartTimestamp as timestamp,",
				"          ProjectEarliestEndTimestamp as timestamp,",
				"          ProjectLatestStartTimestamp as timestamp,",
				"          ProjectLatestEndTimestamp as timestamp,",
				"          ProjectClosingTimestamp as timestamp,",
				"          ProjectRiskAssessmentStatement as string,",
				"          ProjectWorkStatement as string,",
				"          ProjectCharterStatement as string,",
				"          BusinessCaseStatement as string,",
				"          LocationId as integer,",
				"          ProjectGlAccountNumber as string,",
				"          ResponsibilityCenterId as integer,",
				"          ProjectNote as string",
				"     ),",
				"     mapColumn(",
				"          ProjectId = project_id,",
				"          ProjectName = follow_id",
				"     )) ~> Project",
				"komoku sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectPhase',",
				"     input(",
				"          ProjectId as integer,",
				"          ProjectPhaseId as integer,",
				"          ProjectPhaseTypeId as integer,",
				"          ProjectPhaseName as string,",
				"          ProjectPhaseDescription as string,",
				"          ProjectPhasePlannedStartDate as date,",
				"          ProjectPhasePlannedFinishDate as date,",
				"          ProjectPhaseActualStartDate as date,",
				"          ProjectPhaseActualFinishDate as date",
				"     ),",
				"     mapColumn(",
				"          ProjectId = project_id,",
				"          ProjectPhaseId = komoku_id,",
				"          ProjectPhaseName = jisshikomoku,",
				"          ProjectPhaseDescription = mokuhyochi",
				"     )) ~> ProjectPhase",
				"shokomoku sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectActivity',",
				"     input(",
				"          ProjectId as integer,",
				"          ActivityId as integer,",
				"          ActivityName as string,",
				"          ActivityDescription as string,",
				"          ActivityPlannedStartTimestamp as timestamp,",
				"          ActivityActualStartTimestamp as timestamp,",
				"          ActivityPlannedEndTimestamp as timestamp,",
				"          ActivityActualEndTimestamp as timestamp",
				"     ),",
				"     mapColumn(",
				"          ProjectId = project_id,",
				"          ActivityId = shokomoku_id,",
				"          ActivityName = naiyo",
				"     )) ~> ProjectActivity",
				"jishijiko sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectActivityTask',",
				"     input(",
				"          ProjectId as integer,",
				"          ActivityId as integer,",
				"          TaskId as integer,",
				"          ActivityTaskSequenceNumber as integer,",
				"          ActivityTaskNote as string",
				"     ),",
				"     mapColumn(",
				"          ProjectId = project_id,",
				"          ActivityId = shokomoku_id,",
				"          TaskId = jishijiko_id",
				"     )) ~> ProjectActivityTask",
				"ToTimestamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'Task',",
				"     input(",
				"          TaskId as integer,",
				"          TaskName as string,",
				"          TaskDescription as string,",
				"          TaskSpecificationStatement as string,",
				"          SequenceNumber as integer,",
				"          MilestoneIndicator as boolean,",
				"          CriticalPathTaskIndicator as boolean,",
				"          TaskNote as string,",
				"          TaskPlannedStartTimestamp as timestamp,",
				"          TaskScheduledStartTimestamp as timestamp,",
				"          TaskActualStartTimestamp as timestamp,",
				"          TaskPlannedCompletionTimestamp as timestamp,",
				"          TaskScheduledCompletionTimestamp as timestamp,",
				"          TaskActualCompletionTimestamp as timestamp,",
				"          TaskEarliestStartTimestamp as timestamp,",
				"          TaskLatestStartTimestamp as timestamp,",
				"          TaskEarliestCompletionTimestamp as timestamp,",
				"          TaskLatestCompletionTimestamp as timestamp,",
				"          TaskFloatHours as integer,",
				"          PlannedBillableLaborUnits as integer,",
				"          ActualBillableLaborUnits as integer,",
				"          PlannedBillableChargesAmount as decimal(18,2),",
				"          ActualBillableChargesAmount as decimal(18,2),",
				"          PlannedCostsAmount as decimal(18,2),",
				"          ActualCostsAmount as decimal(18,2),",
				"          TaskTypeId as integer,",
				"          LocationId as integer,",
				"          ResponsibilityCenterId as integer,",
				"          TaskGlAccountNumber as string",
				"     ),",
				"     mapColumn(",
				"          TaskId = jishijiko_id,",
				"          TaskName = jisshikomoku,",
				"          TaskPlannedStartTimestamp = start,",
				"          TaskPlannedCompletionTimestamp = End",
				"     )) ~> Task"
			]
		}
	}
}