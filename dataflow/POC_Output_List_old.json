{
	"name": "POC_Output_List_old",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "task"
				},
				{
					"name": "projectactivitytask"
				},
				{
					"name": "projectactivity"
				},
				{
					"name": "projectphaseactivity"
				},
				{
					"name": "projectphase"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "projectlist",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TaskId as integer,",
				"          TaskName as string,",
				"          TaskDescription as string,",
				"          TaskSpecificationStatement as string,",
				"          SequenceNumber as integer,",
				"          MilestoneIndicator as boolean,",
				"          CriticalPathTaskIndicator as boolean,",
				"          TaskNote as string,",
				"          TaskPlannedStartTimestamp as timestamp,",
				"          TaskScheduledStartTimestamp as timestamp,",
				"          TaskActualStartTimestamp as timestamp,",
				"          TaskPlannedCompletionTimestamp as timestamp,",
				"          TaskScheduledCompletionTimestamp as timestamp,",
				"          TaskActualCompletionTimestamp as timestamp,",
				"          TaskEarliestStartTimestamp as timestamp,",
				"          TaskLatestStartTimestamp as timestamp,",
				"          TaskEarliestCompletionTimestamp as timestamp,",
				"          TaskLatestCompletionTimestamp as timestamp,",
				"          TaskFloatHours as integer,",
				"          PlannedBillableLaborUnits as integer,",
				"          ActualBillableLaborUnits as integer,",
				"          PlannedBillableChargesAmount as decimal(18,2),",
				"          ActualBillableChargesAmount as decimal(18,2),",
				"          PlannedCostsAmount as decimal(18,2),",
				"          ActualCostsAmount as decimal(18,2),",
				"          TaskTypeId as integer,",
				"          LocationId as integer,",
				"          ResponsibilityCenterId as integer,",
				"          TaskGlAccountNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'Task') ~> task",
				"source(output(",
				"          ProjectId as integer,",
				"          ActivityId as integer,",
				"          TaskId as integer,",
				"          ActivityTaskSequenceNumber as integer,",
				"          ActivityTaskNote as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectActivityTask') ~> projectactivitytask",
				"source(output(",
				"          ProjectId as integer,",
				"          ActivityId as integer,",
				"          ActivityName as string,",
				"          ActivityDescription as string,",
				"          ActivityPlannedStartTimestamp as timestamp,",
				"          ActivityActualStartTimestamp as timestamp,",
				"          ActivityPlannedEndTimestamp as timestamp,",
				"          ActivityActualEndTimestamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectActivity') ~> projectactivity",
				"source(output(",
				"          ProjectId as integer,",
				"          ProjectPhaseId as integer,",
				"          ActivityId as integer,",
				"          ProjectPhaseActivityNote as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectPhaseActivity') ~> projectphaseactivity",
				"source(output(",
				"          ProjectId as integer,",
				"          ProjectPhaseId as integer,",
				"          ProjectPhaseTypeId as integer,",
				"          ProjectPhaseName as string,",
				"          ProjectPhaseDescription as string,",
				"          ProjectPhasePlannedStartDate as date,",
				"          ProjectPhasePlannedFinishDate as date,",
				"          ProjectPhaseActualStartDate as date,",
				"          ProjectPhaseActualFinishDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'POC_Database',",
				"     tableName: 'ProjectPhase') ~> projectphase",
				"task, projectactivitytask join(task@TaskId == projectactivitytask@TaskId,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, projectactivity join(projectactivitytask@ActivityId == projectactivity@ActivityId,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, projectphaseactivity join(projectactivitytask@ActivityId == projectphaseactivity@ActivityId,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, projectphase join(projectphaseactivity@ProjectPhaseId == projectphase@ProjectPhaseId,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          ProjectId = projectactivitytask@ProjectId,",
				"          ProjectPhaseName,",
				"          ActivityName,",
				"          TaskName,",
				"          TaskPlannedStartTimestamp,",
				"          TaskPlannedCompletionTimestamp",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> sink1",
				"join4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['projectlist.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ProjectId = projectactivity@ProjectId,",
				"          ProjectPhaseName,",
				"          ActivityName,",
				"          TaskName,",
				"          TaskPlannedStartTimestamp,",
				"          TaskPlannedCompletionTimestamp",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}